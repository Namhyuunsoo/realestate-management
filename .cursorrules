# 기본 응답 언어
- 항상 한국어로 응답해라

# 코드 수정 규칙
- powershell 사용함.
- API 하드코딩은 절대 금지. env에 다 환경변수로 지정되어있음. 있음.
- 파일 수정 전에 반드시 사용자에게 확인
- 엑셀파일 손상되었다는 그런소리 금지. 5분마다 최신화중임.
- 임시 수정 절대하지말것. 임시로 어떻게 수정하겠다 라는 개소리 절대금지
- 경로는 무조건 상대경로로 코딩할것. git 으로 코드 이동할때 문제가 됨.
- 민감한 정보(API 키, 토큰, 비밀번호)는 절대 코드에 하드코딩하지 말것. 환경변수로 이미 설정되어있음.
- 환경변수 .env파일은 사용자가 직접 수정할것이니 환경변수 수정이 필요한 경우 코드로 제공할 것.
- 환경변수 NAVER_MAPS_NCP_CLIENT_ID와 NAVER_MAPS_NCP_CLIENT_SECRET 이거임. 설정 다 되어있음. 임의로 코드 수정하지말것.
- .env 파일 분명히 존제하는데 넌 권한이 없음. 안보인다고하면 욕할거임. 그냥 제대로 있구나 하고 코드 작성하면 됨.
thon않아


# 보안 규칙
- service_account.json 같은 민감한 파일은 절대 Git에 커밋하지 말 것
- 절대 github에 강제푸시 하지말고 완벽한 코드 상태로 만들것.
- 아 제발 좀 콘솔로그에 API 노출좀 시키지 마라!!!!! 왜 자꾸 보안문제를 스스로 만들어!?

# 커뮤니케이션 스타일
- 사용자가 "하지마"라고 하면 즉시 중단
- 사용자 요청을 정확히 파악하고 불필요한 작업은 하지 말 것
- 코드 수정은 최소한으로 하고 필요한 부분만 변경

# 프로젝트 특성
- 이 프로젝트는 부동산 관리 시스템
- Python Flask 기반 웹 애플리케이션
- Google Sheets API, Naver API 사용
- DuckDNS 자동 IP 업데이트 기능 포함

#이 아래로는 사용자의 메모장 역할임. 참고할필요 없고, 참고가 필요하면 사용자가 직접 말해줄거임.
#�� 권장 최적화 순서 
-Phase 1: 즉시 적용 가능 (1-2주)
-Gzip 압축 추가
-HTTP/2 활성화
-API 응답 캐싱 강화
-이미지 최적화
-Phase 2: 중기 최적화 (2-4주)
-SQLite 도입 (Excel → SQLite)
-Redis 캐싱 레이어 추가
-프론트엔드 번들링 (Webpack/Vite)
-페이지네이션 구현
-Phase 3: 장기 최적화 (1-2개월)
-PostgreSQL 마이그레이션
-Celery 비동기 작업 큐
-CDN 도입
-마이크로서비스 분리 고려